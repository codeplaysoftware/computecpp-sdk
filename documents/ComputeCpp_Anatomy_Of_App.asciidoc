== Community Edition (Beta) v. 0.1.2
:toc:
:homepage: http://www.codeplay.com/computecpp
:doctype: article
:version: 0.1.2
:author: Codeplay Software Ltd. <sycl@codeplay.com>
:source-highlighter: coderay
:coderay-css: style
:copycss:
:linkcss:


ifdef::env-github[]

:computecppUrl: https://computecpp.codeplay.com
:syclSpecUrl: http://www.khronos.org/registry/sycl/specs/sycl-1.2.pdf
:spirUrl: http://www.khronos.org/faq/spir
:platformSupportUrl: https://computecpp.codeplay.com/releases/latest/platform-support-notes
:computecppInfoUrl: https://computecpp.codeplay.com/releases/latest/information-manual
:ccpApiDoc: https://computecpp.codeplay.com/releases/latest/api-guide/
:computeppUrl: https://computecpp.codeplay.com/releases/latest/computepp-manual
:streamUrl: https://computecpp.codeplay.com/releases/latest/stream-manual
:syclParallelStlUrl: https://github.com/KhronosGroup/SyclParallelSTL
:computecppIntegrationGuide: https://github.com/codeplaysoftware/computecpp-sdk/wiki/ComputeCpp_Integration_Guide
:opencl12Url: https://www.khronos.org/registry/cl/specs/opencl-1.2.pdf
:computecppReleaseNotesUrl: https://computecpp.codeplay.com/latest/Release_notes
:eigenSYCLUrl: https://bitbucket.org/benoitsteiner/opencl/branch/Codeplay
:computecppSamples: https://github.com/codeplaysoftware/computecpp-sdk/tree/master/samples

:glossaryCommandGroupFunctor: https://github.com/codeplaysoftware/computecpp-sdk/wiki/ComputeCpp_Glossary#command-group-functor[SYCL command group functor]
:glossaryCommandGroup: https://github.com/codeplaysoftware/computecpp-sdk/wiki/ComputeCpp_Glossary#command-group[Command Group]
:glossaryCommandGroupScope: https://github.com/codeplaysoftware/computecpp-sdk/wiki/ComputeCpp_Glossary#command-group-scope[Command Group Scope]
:glossaryKernelFunctor: https://github.com/codeplaysoftware/computecpp-sdk/wiki/ComputeCpp_Glossary#kernel-functor[Kernel Functor]
:glossaryKernelScope: https://github.com/codeplaysoftware/computecpp-sdk/wiki/ComputeCpp_Glossary#kernel-scope[Kernel Scope]
:glossaryAccessor: https://github.com/codeplaysoftware/computecpp-sdk/wiki/ComputeCpp_Glossary#accessor[Accessor]
:glossarySyclRuntime: https://github.com/codeplaysoftware/computecpp-sdk/wiki/ComputeCpp_Glossary#sycl-runtime[SYCL Runtime]
:glossaryNDRange: https://github.com/codeplaysoftware/computecpp-sdk/wiki/ComputeCpp_Glossary#ndrange-nd-range[ND-range]
:glossaryKernelDispatch: https://github.com/codeplaysoftware/computecpp-sdk/wiki/ComputeCpp_Glossary#kernel-dispatch[Kernel Dispatch]

:imageComputeCppLogo: /codeplaysoftware/computecpp-sdk/wiki/images/ComputeCpp.png
:imagePackageContent: /codeplaysoftware/computecpp-sdk/wiki/images/ComputeCppPackageContent.png
:imageParallelFor: /codeplaysoftware/computecpp-sdk/wiki/images/parallel_for_execution.png
endif::env-github[]

ifndef::env-github[]
include::adoc_links.adoc[]

:glossaryCommandGroupFunctor: <<ComputeCpp_Glossary.asciidoc#CommandGroupFunctor, Command Group Functor>>
:glossaryCommandGroup: <<ComputeCpp_Glossary.asciidoc#CommandGroup, Command Group>>
:glossaryCommandGroupScope: <<ComputeCpp_Glossary.asciidoc#CommandGroupScope, Command Group Scope>>
:glossaryKernelFunctor: <<ComputeCpp_Glossary.asciidoc#KernelFunctor,Kernel Functor>>
:glossaryKernelScope: <<ComputeCpp_Glossary.asciidoc#KernelScope, Kernel Scope>>
:glossaryAccessor: <<ComputeCpp_Glossary.asciidoc#Accessor, Accessor>>
:glossarySyclRuntime: <<ComputeCpp_Glossary.asciidoc#SYCLRuntime, SYCL Runtime>>
:glossaryNDRange: <<ComputeCpp_Glossary.asciidoc#NDRange, ND-range>>
:glossaryKernelDispatch: <<ComputeCpp_Glossary.asciidoc#KernelDispatch, Kernel Dispatch>>

:imageComputeCppLogo: images/ComputeCpp.svg
:imagePackageContent: images/ComputeCppPackageContent.svg
:imageParallelFor: images/parallel_for_execution.svg
:computecppSamples: https://github.com/codeplaysoftware/computecpp-sdk/tree/master/samples
endif::env-github[]

image::{imageComputeCppLogo}[ComputeCpp (TM)]

:numbered!:

== Anatomy of a  SYCL(TM) application using ComputeCpp(TM)

SYCL(TM) for OpenCL(TM) is a heterogeneous parallel programming interface which
integrates modern pass:[C++] techniques with OpenCL(TM) 1.2 massively parallel
device capabilities. A SYCL application is a pass:[C++] application that uses
the SYCL API, in order to integrate with OpenCL platforms existing on the target
system.

The following example from the link:{computecppSamples}[ComputeCpp sample code] 
called "simple_vector_add" depicts the basic structure of a SYCL application.

This example implements a simple addition of two vectors of scalar types on
a SYCL device. The vectors are represented using _std::array_ for simplicity.

[SimpleSycl]
.Basic SYCL example
[source,cpp,linenums]
----
#include <CL/sycl.hpp>
#include <array>

constexpr cl::sycl::access::mode sycl_read = cl::sycl::access::mode::read;
constexpr cl::sycl::access::mode sycl_write = cl::sycl::access::mode::write;

template <typename T>
class SimpleVadd;

template <typename T, size_t N>
void simple_vadd(const std::array<T, N> &A, const std::array<T, N> &B,
                 std::array<T, N> &C) {
  cl::sycl::queue deviceQueue;
  cl::sycl::range<1> numOfItems{N};
  cl::sycl::buffer<T, 1> bufferA(A.data(), numOfItems);
  cl::sycl::buffer<T, 1> bufferB(B.data(), numOfItems);
  cl::sycl::buffer<T, 1> bufferC(C.data(), numOfItems);

  deviceQueue.submit([&](cl::sycl::handler &cgh) {
    auto accessorA = bufferA.template get_access<sycl_read>(cgh);
    auto accessorB = bufferB.template get_access<sycl_read>(cgh);
    auto accessorC = bufferC.template get_access<sycl_write>(cgh);

    cgh.parallel_for<class SimpleVadd<T>>(numOfItems,
		[=](cl::sycl::id<1> wiID) {
      accessorC[wiID] = accessorA[wiID] + accessorB[wiID];
    });
  });
}

int main() {
  const size_t array_size = 4;
  std::array<cl::sycl::cl_int, array_size> A = {{1, 2, 3, 4}},
                                           B = {{1, 2, 3, 4}}, C;
  std::array<cl::sycl::cl_float, array_size> D = {{1.f, 2.f, 3.f, 4.f}},
                                             E = {{1.f, 2.f, 3.f, 4.f}}, F;
  simple_vadd<int, array_size>(A, B, C);
  simple_vadd<float, array_size>(D, E, F);
  for (unsigned int i = 0; i < array_size; i++) {
    if (C[i] != A[i] + B[i]) {
      return 1;
    }
    if (F[i] != D[i] + E[i]) {
      return 1;
    }
  }
  return 0;
}
----

In this example, the addition of the two vector arrays is defined using a
templated function `simple_vadd`. This function implements:
....
C = A + B
....
where *A*, *B* and *C* are vector arrays of the same type and size.

The contents of the _std::array_ are initially stored on the host memory, as
usual in pass:[C++] programs. In order to make the contents of the array
available on the device, developers must create a SYCL memory object.

On line number <1>, we include `CL/sycl.hpp`.
The ComputeCpp SYCL implementation uses this single header to include all
the API interface and the dependant types defined on the API.


On line number <14>, we construct a _cl::sycl::range_ object initialized to the
size of the vectors (the template parameter passed to the function).
Objects in SYCL are multi-dimensional, and the number of elements per components
is expressed using the _cl::sycl::range_ objects.
A _cl::sycl::range_ is a vector with as many components as dimensions. The value
stored in each component express the size on that component, starting from 1.
The range is used to create the _cl::sycl::buffer_ object, which manages the
data on host and device. In this case, since we use vectors, we only use one
dimensional buffers (second template parameter).
The objects `bufferA`, `bufferB` and `bufferC` are initialized with the pointer
obtained from the _std::array_.

In SYCL, the execution of any computation on a SYCL device
follows the link:{opencl12Url}[OpenCL execution model]. In this simple example,
we use the _default_ SYCL device chosen by the ComputeCpp runtime library on
`cl::sycl::queue` construction.


The {glossaryCommandGroupFunctor} encapsulates the vector
addition kernel alongside with the input and output operations.
On line number <19> we define the lambda function (our command group functor)
and submit it to the our  queue object `deviceQueue`.

The {glossaryCommandGroup} defines the {glossaryCommandGroupScope}. Any object that
takes a _cl::sycl::handler_ object can only be used in {glossaryCommandGroupScope}.
The _cl::sycl::handler_ object can only be constructed by the runtime.
Device accessors and the {glossaryKernelFunctor} can only be defined
in this scope.

The SYCL programming model uses {glossaryAccessor} (the
`cl::sycl::accessor` class) to keep track of the access from different command
groups to memory objects. The {glossarySyclRuntime} can then use the
different access modes of the accessors to create a dependency graph to schedule
the execution of multiple command groups in different devices while maintaining
a consistent view of the memory.

Accessors are obtained from buffers on lines <20> to <21>, by calling the
`get_access` method on the buffers to create `cl::sycl::accessor` objects.

On line <20> we require a read only accessor on the queue's device. The
`sycl_read` variable is a `constexpr` variable of the enum class
`cl::sycl::access::mode`. The declarations of `sycl_read` and the corresponding
`sycl_write` are on lines <4> and <5>.

This example implements the `simple_vadd` computation in a SIMD(single
  instruction, multiple data) manner: The computation will be executed on
  multiple processing elements in parallel. This is the _default_ parallel
  programming mode in SYCL.

The lambda function object defined at line numbers <24> to <27> defines the
{glossaryKernelScope}. The lambda is called by the `parallel_for`
fuction API. In the example, we spawn as many work-items as the number of
elements of the vectors, specified in the _numOfItems_ _cl::sycl::range_
variable.
The name of the kernel is specified as the template parameter of the
`parallel_for` using the class type `SimpleVadd` footnote:[pass:[C++] lambda
functions are unnamed function objects which capture variables in scope. Due to
the fact that ComputeCpp is following the _single source multiple pass_
techique, using a host and a device compiler, that name is going to be used for
identifying the function object across the different compilers.]

Note that this is not required when the parallel_for function is called using a
functor object, the functor typename is going to be used as the SYCL kernel
name].

The `parallel_for` invocation will execute the lambda function object as a SYCL
kernel to an _nd_range_ execution space. The _nd_range_ consists of _work-items_
organized into _work-groups_.

The `parallel_for` API used in the example is the simplest way of dispatching
kernels to a SYCL device. The _number of work-groups_ is defined by the
heuristics of the ComputeCpp runtime: An {glossaryNDRange} will be
implicitly constructed for the OpenCL execution of the
{glossaryKernelFunctor} footnote:[If a `cl::sycl::nd_range`
object is given to the `parallel_for` invocation, the SYCL runtime will be using
the explicitly specified _nd_range_.]. In this example, `simple_vadd` is called
for `array_size` equal to four on line number <39> and line number <40>. The
number of work-items, `numOfItems`, is equal to four so the number of
work-groups can only be one, two or four as shown in the following
<<parallel_for_execution,diagram>>.

[parallel_for_execution]
.Vector Addition Diagram
image::{imageParallelFor}[Vector Addition Diagram]

On line number <26>, `accessorC` (a write only accessor) is used to store the
result of the addition of the read-only accessors `accessorA` and `accessorB` is
assigned to. Let's take a simplified view of what the second work-item (`wiID`)
of our four-element one dimensional _nd_range_ will do. The `wiID[1]` will add
`accessorA[wiID[1]]` with `accessorB[wiID[1]]` and store it to
`accessorC[wiID[1]]` (depicted in <<parallel_for_execution,diagram>>).

On line number <25> the lambda function object (that defines the
{glossaryKernelScope) takes as parameter the current instance in the
global index space class (`cl::sycl::id`). The _cl::sycl::id_ class features
various getter methods to obtain specific values of the instance. The value of
`wiID` will change for each instance in the complete _nd_range_ execution
space. Note that SYCL allows using _cl::sycl::id_ variables directly to index
accessor types.

The `cl::sycl::queue::submit` method returns immediately after scheduling the
command group functor to the SYCL queue for execution on the SYCL device. The
command group functor will be executed on the device when the accessor
dependencies are resolved and the device is ready to perform the {glossaryKernelDispatch}.

In the `main` function of the pass:[C++] SYCL application, we define the size
of the vectors to be `array_size`. On line <33> we define the `std::array`
vectors *A*, *B* and *C* using the SYCL type `cl::sycl::cl_int`.
All `cl_XXX` types defined in the SYCL namespace are types portable between
{Cpluplus} host and device. ComputeCpp can convert the host type to the
corresponding device type in this case. Normal host types (e.g, `int`) can still
be used, but the interoperability is not defined, and sizes may vary between
host and device.
 footnote:[pass:[compute++] is not going to change the type defined the developer on
 the device side unless it is defined as a SYCL OpenCL interoperability type,
 e.g. cl_int, cl_long, etc.].

On line number <36> we are calling the `simple_add` templated function for
`cl_int` and `array_size` providing as parameters the array objects of A, B and
C. Note that on line number <37> we are calling the `simple_add` templated
function for `cl_float` and `array_size` for the `std::array` objects *D*,*E*
and *F*. This shows one of the main features of SYCL: Since the SYCL interface
is templated, we can write generic algorithms that can be templated by different
types without changing the algorithm, interacting nicely with pass:[C++]
programming.
